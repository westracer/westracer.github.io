{"version":3,"sources":["constant.ts","theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["data","name","title","location","links","icon","faStackOverflow","link","faGithub","faMedium","faLinkedin","resume","text","socials","faEnvelope","faFacebook","faVk","faTwitter","themes","dark","createMuiTheme","palette","type","light","App","useState","isDark","setIsDark","theme","nameStyle","backgroundColor","primary","color","background","default","linkRowContent","map","o","Button","size","variant","href","cvRowContent","startIcon","socialRowContent","ThemeProvider","className","IconButton","onClick","style","fontSize","Divider","CssBaseline","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTA+DeA,EApDF,CACTC,KAAM,oBACNC,MAAO,oBACPC,SAAU,kBACVC,MAAO,CACH,CACIC,KAAMC,IACNC,KAAM,sBAEV,CACIF,KAAMG,IACND,KAAM,sBAEV,CACIF,KAAMI,IACNF,KAAM,sBAEV,CACIF,KAAMK,IACNH,KAAM,uBAGdI,OAAQ,CACJ,CACIC,KAAM,oBACNL,KAAM,sBAEV,CACIK,KAAM,+FACNL,KAAM,uBAGdM,QAAS,CACL,CACIR,KAAMS,IACNP,KAAM,sBAEV,CACIF,KAAMU,IACNR,KAAM,sBAEV,CACIF,KAAMW,IACNT,KAAM,sBAEV,CACIF,KAAMY,IACNV,KAAM,wB,yEC/CHW,EATA,CACXC,KAAMC,YAAe,CACjBC,QAAS,CACPC,KAAM,UAGZC,MAAOH,eCqDII,MAjDf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACLC,EADK,KACGC,EADH,KAEPC,EAAQR,YAAeM,EAASR,EAAOC,KAAOD,EAAOK,OAErDM,EAA2B,CAC/BC,gBAAiBF,EAAMP,QAAQT,KAAKmB,QACpCC,MAAOJ,EAAMP,QAAQY,WAAWC,SAG9BC,EAAiBnC,EAAKI,MAAMgC,KAAI,SAACC,GAAD,OAAO,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQC,QAAQ,OAAOR,MAAM,UAAUS,KAAK,KAClG,kBAAC,IAAD,CAAiBpC,KAAMgC,EAAEhC,KAAMkC,KAAK,WAGlCG,EAAe1C,EAAKW,OAAOyB,KAAI,SAACC,GAAD,OAAO,kBAACC,EAAA,EAAD,CAAQE,QAAQ,YAAYR,MAAM,UAAUS,KAAMJ,EAAE9B,KAAMoC,UAAW,kBAAC,IAAD,OAC5GN,EAAEzB,SAGDgC,EAAmB5C,EAAKa,QAAQuB,KAAI,SAACC,GAAD,OAAO,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQC,QAAQ,OAAOR,MAAM,UAAUS,KAAK,KACtG,kBAAC,IAAD,CAAiBpC,KAAMgC,EAAEhC,KAAMkC,KAAK,WAKtC,OACE,kBAACM,EAAA,EAAD,CAAejB,MAAOA,GACpB,yBAAKkB,UAAU,OACb,yBAAKA,UAAU,WACb,kBAACC,EAAA,EAAD,CAAYC,QANA,kBAAMrB,GAAWD,KAMMA,EAAS,kBAAC,kBAAD,MAAsB,kBAAC,eAAD,OAClE,6BAAMkB,IAER,yBAAKE,UAAU,WACb,wBAAIA,UAAU,OAAOG,MAAOpB,GAAY7B,EAAKC,MAC7C,yBAAK6C,UAAU,YACb,6BAAM9C,EAAKE,OACX,6BACE,yBAAK4C,UAAU,QAAO,kBAAC,aAAD,CAAYI,SAAS,WAC1ClD,EAAKG,WAGV,yBAAK2C,UAAU,UAAUJ,GACzB,yBAAKI,UAAU,WAAU,kBAACK,EAAA,EAAD,OACzB,yBAAKL,UAAU,YAAYX,KAG/B,kBAACiB,EAAA,EAAD,QC5CcC,QACW,cAA7BC,OAAOnD,SAASoD,UAEe,UAA7BD,OAAOnD,SAASoD,UAEhBD,OAAOnD,SAASoD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dab78de3.chunk.js","sourcesContent":["import {\r\n    faStackOverflow,\r\n    faGithub,\r\n    faMedium,\r\n    faLinkedin,\r\n    faFacebook,\r\n    faVk,\r\n    faTwitter\r\n} from '@fortawesome/free-brands-svg-icons';\r\nimport {  faEnvelope } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst data = {\r\n    name: 'Igor Kharakhordin',\r\n    title: 'Software Engineer',\r\n    location: 'Barnaul, Russia',\r\n    links: [\r\n        {\r\n            icon: faStackOverflow,\r\n            link: 'https://google.com',\r\n        },\r\n        {\r\n            icon: faGithub,\r\n            link: 'https://google.com',\r\n        },\r\n        {\r\n            icon: faMedium,\r\n            link: 'https://google.com',\r\n        },\r\n        {\r\n            icon: faLinkedin,\r\n            link: 'https://google.com',\r\n        },\r\n    ],\r\n    resume: [\r\n        {\r\n            text: 'Resume in English',\r\n            link: 'https://google.com',\r\n        },\r\n        {\r\n            text: 'Резюме на русском',\r\n            link: 'https://google.com',\r\n        },\r\n    ],\r\n    socials: [\r\n        {\r\n            icon: faEnvelope,\r\n            link: 'https://google.com',\r\n        },\r\n        {\r\n            icon: faFacebook,\r\n            link: 'https://google.com',\r\n        },\r\n        {\r\n            icon: faVk,\r\n            link: 'https://google.com',\r\n        },\r\n        {\r\n            icon: faTwitter,\r\n            link: 'https://google.com',\r\n        },\r\n    ],\r\n}\r\n\r\nexport default data","import { createMuiTheme }  from '@material-ui/core/styles'\r\n\r\nconst themes = {\r\n    dark: createMuiTheme({\r\n        palette: {\r\n          type: 'dark',\r\n        },\r\n    }),\r\n    light: createMuiTheme()\r\n};\r\n\r\nexport default themes","import React, { CSSProperties, useState } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport data from './constant';\nimport { LocationOn, InvertColors, InvertColorsOff } from '@material-ui/icons/index';\nimport Description from '@material-ui/icons/Description';\nimport { Divider, IconButton } from '@material-ui/core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { CssBaseline, ThemeProvider } from '@material-ui/core';\nimport themes from './theme';\n\nfunction App() {\n  const [ isDark, setIsDark ] = useState(false);\n  const theme = createMuiTheme(isDark ? themes.dark : themes.light);\n\n  const nameStyle: CSSProperties = {\n    backgroundColor: theme.palette.text.primary,\n    color: theme.palette.background.default,\n  };\n\n  let linkRowContent = data.links.map((o) => <Button size=\"large\" variant=\"text\" color=\"default\" href=\"#\">\n    <FontAwesomeIcon icon={o.icon} size=\"3x\" />\n  </Button>);\n\n  let cvRowContent = data.resume.map((o) => <Button variant=\"contained\" color=\"primary\" href={o.link} startIcon={<Description />}>\n    {o.text}\n  </Button>);\n  \n  let socialRowContent = data.socials.map((o) => <Button size=\"large\" variant=\"text\" color=\"default\" href=\"#\">\n    <FontAwesomeIcon icon={o.icon} size=\"lg\" />\n  </Button>);\n\n  const toggleTheme = () => setIsDark(!isDark);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <div className=\"top-row\">\n          <IconButton onClick={toggleTheme}>{isDark ? <InvertColorsOff /> : <InvertColors />}</IconButton>\n          <div>{socialRowContent}</div>\n        </div>\n        <div className=\"content\">\n          <h1 className=\"name\" style={nameStyle}>{data.name}</h1>\n          <div className=\"subtitle\">\n            <div>{data.title}</div>\n            <div>\n              <div className=\"icon\"><LocationOn fontSize=\"small\" /></div>\n              {data.location}\n            </div>\n          </div>\n          <div className=\"cv-row\">{cvRowContent}</div>\n          <div className=\"divider\"><Divider /></div>\n          <div className=\"link-row\">{linkRowContent}</div>\n        </div>\n      </div>\n      <CssBaseline />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}