{"version":3,"sources":["constant.ts","theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["data","name","title","location","links","icon","faStackOverflow","link","faGithub","faMedium","resume","text","socials","faEnvelope","faSkype","faFacebook","faLinkedin","themes","dark","createMuiTheme","palette","type","light","App","browserModeIsDark","useLightSwitch","Mode","Dark","useState","isDark","setIsDark","theme","nameStyle","backgroundColor","primary","color","background","default","linkRowContent","map","o","Button","target","size","variant","href","cvRowContent","startIcon","socialRowContent","ThemeProvider","className","IconButton","onClick","style","fontSize","Divider","CssBaseline","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTA0DeA,EAhDF,CACTC,KAAM,oBACNC,MAAO,4CACPC,SAAU,kBACVC,MAAO,CACH,CACIC,KAAMC,IACNC,KAAM,6DAEV,CACIF,KAAMG,IACND,KAAM,gCAEV,CACIF,KAAMI,IACNF,KAAM,mCAGdG,OAAQ,CACJ,CACIC,KAAM,oBACNJ,KAAM,oFAEV,CACII,KAAM,+FACNJ,KAAM,qFAGdK,QAAS,CACL,CACIP,KAAMQ,IACNN,KAAM,+BAEV,CACIF,KAAMS,IACNP,KAAM,8CAEV,CACIF,KAAMU,IACNR,KAAM,uCAEV,CACIF,KAAMW,IACNT,KAAM,+C,yEC1CHU,EATA,CACXC,KAAMC,YAAe,CACjBC,QAAS,CACPC,KAAM,UAGZC,MAAOH,e,QCmEII,MA5Df,WACE,IACMC,EADcC,6BACsBC,OAAKC,KAFlC,EAIiBC,mBAAQ,OAACJ,QAAD,IAACA,MAJ1B,mBAILK,EAJK,KAIGC,EAJH,KAKPC,EAAQZ,YAAeU,EAASZ,EAAOC,KAAOD,EAAOK,OAErDU,EAA2B,CAC/BC,gBAAiBF,EAAMX,QAAQT,KAAKuB,QACpCC,MAAOJ,EAAMX,QAAQgB,WAAWC,SAG9BC,EAAiBtC,EAAKI,MAAMmC,KAAI,SAACC,GAAD,OAClC,kBAACC,EAAA,EAAD,CAAQC,OAAO,SAASC,KAAK,QAAQC,QAAQ,OAAOT,MAAM,UAAUU,KAAML,EAAEjC,MAC1E,kBAAC,IAAD,CAAiBF,KAAMmC,EAAEnC,KAAMsC,KAAK,WAIpCG,EAAe9C,EAAKU,OAAO6B,KAAI,SAACC,GAAD,OACjC,kBAACC,EAAA,EAAD,CAAQC,OAAO,SAASE,QAAQ,YAAYT,MAAM,UAAUU,KAAML,EAAEjC,KAAMwC,UAAW,kBAAC,IAAD,OAClFP,EAAE7B,SAIHqC,EAAmBhD,EAAKY,QAAQ2B,KAAI,SAACC,GAAD,OACtC,kBAACC,EAAA,EAAD,CAAQC,OAAO,SAASC,KAAK,QAAQC,QAAQ,OAAOT,MAAM,UAAUU,KAAML,EAAEjC,MAC1E,kBAAC,IAAD,CAAiBF,KAAMmC,EAAEnC,KAAMsC,KAAK,WAMxC,OACE,kBAACM,EAAA,EAAD,CAAelB,MAAOA,GACpB,yBAAKmB,UAAU,OACb,yBAAKA,UAAU,WACb,kBAACC,EAAA,EAAD,CAAYR,KAAK,QAAQS,QANb,kBAAMtB,GAAWD,KAO1BA,EAAS,kBAAC,kBAAD,MAAsB,kBAAC,eAAD,QAGpC,yBAAKqB,UAAU,WACb,wBAAIA,UAAU,OAAOG,MAAOrB,GAAYhC,EAAKC,MAC7C,yBAAKiD,UAAU,YACb,6BAAMlD,EAAKE,OACX,6BACE,yBAAKgD,UAAU,QAAO,kBAAC,aAAD,CAAYI,SAAS,WAC1CtD,EAAKG,WAGV,yBAAK+C,UAAU,UAAUJ,GACzB,yBAAKI,UAAU,WAAU,kBAACK,EAAA,EAAD,OACzB,yBAAKL,UAAU,YAAYZ,GAC3B,yBAAKY,UAAU,cAAcF,KAGjC,kBAACQ,EAAA,EAAD,QC1DcC,QACW,cAA7BC,OAAOvD,SAASwD,UAEe,UAA7BD,OAAOvD,SAASwD,UAEhBD,OAAOvD,SAASwD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.022fe4f1.chunk.js","sourcesContent":["import {\r\n    faStackOverflow,\r\n    faGithub,\r\n    faMedium,\r\n    faFacebook,\r\n    faSkype,\r\n    faLinkedin,\r\n} from '@fortawesome/free-brands-svg-icons';\r\nimport {  faEnvelope } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst data = {\r\n    name: 'Igor Kharakhordin',\r\n    title: 'Software Engineer, Lead Flutter Developer',\r\n    location: 'Barnaul, Russia',\r\n    links: [\r\n        {\r\n            icon: faStackOverflow,\r\n            link: 'https://stackoverflow.com/users/3908065/igor-kharakhordin',\r\n        },\r\n        {\r\n            icon: faGithub,\r\n            link: 'https://github.com/westracer',\r\n        },\r\n        {\r\n            icon: faMedium,\r\n            link: 'https://medium.com/@westracer1',\r\n        },\r\n    ],\r\n    resume: [\r\n        {\r\n            text: 'Resume in English',\r\n            link: 'https://docs.google.com/document/d/1FhIInlWVRMgO7vqt9heg-Bh5lFF7wq3F7dhfo0oaG6g/',\r\n        },\r\n        {\r\n            text: 'Резюме на русском',\r\n            link: 'https://docs.google.com/document/d/1tBXEsAiqdhvRKBomm_4zICsDGUoFC1NzRpmrwsNncJo/',\r\n        },\r\n    ],\r\n    socials: [\r\n        {\r\n            icon: faEnvelope,\r\n            link: 'mailto:westracer1@gmail.com',\r\n        },\r\n        {\r\n            icon: faSkype,\r\n            link: 'https://join.skype.com/invite/fEAsgRbzMU3E',\r\n        },\r\n        {\r\n            icon: faFacebook,\r\n            link: 'https://www.facebook.com/westracer/',\r\n        },\r\n        {\r\n            icon: faLinkedin,\r\n            link: 'https://linkedin.com/in/igor-kharakhordin',\r\n        },\r\n    ],\r\n}\r\n\r\nexport default data","import { createMuiTheme }  from '@material-ui/core/styles'\r\n\r\nconst themes = {\r\n    dark: createMuiTheme({\r\n        palette: {\r\n          type: 'dark',\r\n        },\r\n    }),\r\n    light: createMuiTheme()\r\n};\r\n\r\nexport default themes","import React, { CSSProperties, useState } from 'react';\r\nimport './App.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport data from './constant';\r\nimport { LocationOn, InvertColors, InvertColorsOff } from '@material-ui/icons/index';\r\nimport Description from '@material-ui/icons/Description';\r\nimport { Divider, IconButton } from '@material-ui/core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { CssBaseline, ThemeProvider } from '@material-ui/core';\r\nimport themes from './theme';\r\nimport { Mode, useLightSwitch } from 'use-light-switch';\r\n\r\nconst defaultDarkMode = false;\r\n\r\nfunction App() {\r\n  const browserMode = useLightSwitch();\r\n  const browserModeIsDark = browserMode === Mode.Dark;\r\n\r\n  const [ isDark, setIsDark ] = useState(browserModeIsDark ?? defaultDarkMode);\r\n  const theme = createMuiTheme(isDark ? themes.dark : themes.light);\r\n\r\n  const nameStyle: CSSProperties = {\r\n    backgroundColor: theme.palette.text.primary,\r\n    color: theme.palette.background.default,\r\n  };\r\n\r\n  let linkRowContent = data.links.map((o) => \r\n    <Button target=\"_blank\" size=\"large\" variant=\"text\" color=\"default\" href={o.link}>\r\n      <FontAwesomeIcon icon={o.icon} size=\"3x\" />\r\n    </Button>\r\n  );\r\n\r\n  let cvRowContent = data.resume.map((o) => \r\n    <Button target=\"_blank\" variant=\"contained\" color=\"primary\" href={o.link} startIcon={<Description />}>\r\n      {o.text}\r\n    </Button>\r\n  );\r\n  \r\n  let socialRowContent = data.socials.map((o) => \r\n    <Button target=\"_blank\" size=\"large\" variant=\"text\" color=\"default\" href={o.link}>\r\n      <FontAwesomeIcon icon={o.icon} size=\"lg\" />\r\n    </Button>\r\n  );\r\n\r\n  const toggleTheme = () => setIsDark(!isDark);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className=\"App\">\r\n        <div className=\"top-row\">\r\n          <IconButton size=\"small\" onClick={toggleTheme}>\r\n            {isDark ? <InvertColorsOff /> : <InvertColors />}\r\n          </IconButton>\r\n        </div>\r\n        <div className=\"content\">\r\n          <h1 className=\"name\" style={nameStyle}>{data.name}</h1>\r\n          <div className=\"subtitle\">\r\n            <div>{data.title}</div>\r\n            <div>\r\n              <div className=\"icon\"><LocationOn fontSize=\"small\" /></div>\r\n              {data.location}\r\n            </div>\r\n          </div>\r\n          <div className=\"cv-row\">{cvRowContent}</div>\r\n          <div className=\"divider\"><Divider /></div>\r\n          <div className=\"link-row\">{linkRowContent}</div>\r\n          <div className=\"social-row\">{socialRowContent}</div>\r\n        </div>\r\n      </div>\r\n      <CssBaseline />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}